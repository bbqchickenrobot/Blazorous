@page "/themes"
@using Blazorous

<h1>Themes</h1>

<Dynamic TagName="div" css="@_alert">Some of the examples on this page don't work on the static documentation site. To see those examples in action run the sample site locally.</Dynamic>

<p>Themes provide a way to predefine variables or snippets of CSS that can be used throughout the site.</p>

<h2>Setup</h2>

<p>Add your themes in <code>Program.cs</code>. For example, below we define two themes with <code>Variables</code> and an <code>ICss</code> snippet</p>

<pre style="background: rgba(238, 238, 238, 0.92); color: #000">
var serviceProvider = new BrowserServiceProvider(services =>
{
    services.DefineBlazorousThemes(themes =>
    {
        var theme1 = themes.CreateTheme(<span style="color: #093">"Soothing Web Colors"</span>);
        theme1.Variables.Add(<span style="color: #093">"primary"</span>, <span style="color: #093">"#f23d5d"</span>);
        theme1.Variables.Add(<span style="color: #093">"secondary"</span>, <span style="color: #093">"#8c3d5d"</span>);
        theme1.Variables.Add(<span style="color: #093">"font_color"</span>, <span style="color: #093">"white"</span>);
        theme1.Snippets.Add(<span style="color: #093">"heading"</span>, Css.CreateNew().AddRule(<span style="color: #093">"color"</span>, <span style="color: #093">"#423d5d"</span>).AddFontface(css =>
        {
            css.AddRule(<span style="color: #093">"fontFamily"</span>, <span style="color: #093">"Fira Sans"</span>)
                .AddRule(<span style="color: #093">"fontStyle"</span>, <span style="color: #093">"normal"</span>)
                .AddRule(<span style="color: #093">"fontWeight"</span>, 400)
                .AddRule(<span style="color: #093">"src"</span>, <span style="color: #093">"local('Fira Sans Regular'), local('FiraSans-Regular'), url(https://fonts.gstatic.com/s/firasans/v8/va9E4kDNxMZdWfMOD5Vvl4jL.woff2) format('woff2')"</span>)
                .AddRule(<span style="color: #093">"unicodeRange"</span>, <span style="color: #093">"U+0000-00FF, U+0131, U+0152-0153, U+02BB-02BC, U+02C6, U+02DA, U+02DC, U+2000-206F, U+2074, U+20AC, U+2122, U+2191, U+2193, U+2212, U+2215, U+FEFF, U+FFFD"</span>);
        }));

        var theme2 = themes.CreateTheme("Harry Potter");
        theme2.Variables.Add("primary", "#e10000");
        theme2.Variables.Add("secondary", "#12159f");
        theme2.Variables.Add("font_color", "white");
        theme2.Snippets.Add("heading", Css.CreateNew().AddRules("color", "#008709").AddFontface(css =>
        {
            css.AddRule(<span style="color: #093">"fontFamily"</span>, <span style="color: #093">"Butterfly Kids"</span>)
                .AddRule(<span style="color: #093">"fontStyle"</span>, <span style="color: #093">"normal"</span>)
                .AddRule(<span style="color: #093">"fontWeight"</span>, 400)
                .AddRule(<span style="color: #093">"src"</span>, <span style="color: #093">"local('Butterfly Kids Regular'), local('ButterflyKids-Regular'), url(https://fonts.gstatic.com/s/butterflykids/v6/ll8lK2CWTjuqAsXDqlnIbMNs5R4dpRA.woff2) format('woff2')"</span>)
                .AddRule(<span style="color: #093">"unicodeRange"</span>, <span style="color: #093">"U+0000-00FF, U+0131, U+0152-0153, U+02BB-02BC, U+02C6, U+02DA, U+02DC, U+2000-206F, U+2074, U+20AC, U+2122, U+2191, U+2193, U+2212, U+2215, U+FEFF, U+FFFD"</span>);
        }));
    });
});
</pre>

<p><strong>Tip:</strong> you can define your themes in a seperate class for easy portability.</p>

<h2>Usage</h2>

<p>Using curly braces, you can insert variables from you theme into the Css. <code>ApplyThemeSnippet</code> will apply a predefined theme snippet.</p>

<pre style="background:rgba(238,238,238,0.92);color:#000">
<span style="color:#03c">&lt;<span style="font-weight:700">Dynamic</span> <span style="color:#36c;font-style:italic">TagName</span>=<span style="color:#093">"h1"</span> <span style="color:#36c;font-style:italic">css</span>=<span style="color:#093">"@@_heading"</span>></span>This is a test!<span style="color:#03c">&lt;/<span style="font-weight:700">Dynamic</span>></span>
<span style="color:#03c">&lt;<span style="font-weight:700">Dynamic</span> <span style="color:#36c;font-style:italic">TagName</span>=<span style="color:#093">"div"</span> <span style="color:#36c;font-style:italic">css</span>=<span style="color:#093">"@@_primary"</span> <span style="color:#36c;font-style:italic">debug</span>=<span style="color:#093">"true"</span>></span>Primary<span style="color:#03c">&lt;/<span style="font-weight:700">Dynamic</span>></span>
<span style="color:#03c">&lt;<span style="font-weight:700">Dynamic</span> <span style="color:#36c;font-style:italic">TagName</span>=<span style="color:#093">"div"</span> <span style="color:#36c;font-style:italic">css</span>=<span style="color:#093">"@@_secondary"</span>></span>Secondary<span style="color:#03c">&lt;/<span style="font-weight:700">Dynamic</span>></span>

@@functions {
    ICss _primary = Css.CreateNew().AddRules(<span style="color:#093">"color"</span>, <span style="color:#093">"{font_color}"</span>, <span style="color:#093">"background-color"</span>, <span style="color:#093">"{primary}"</span>);
    ICss _secondary = Css.CreateNew().AddRules(<span style="color:#093">"color"</span>, <span style="color:#093">"{font_color}"</span>, <span style="color:#093">"background-color"</span>, <span style="color:#093">"{secondary}"</span>);
    ICss _heading = Css.CreateNew().ApplyThemeSnippet(<span style="color:#093">"heading"</span>);
}
</pre>

<h2>Theme Chooser</h2>

<p><code>Blazorous</code> comes with a <code>ThemeChooser</code> you can use to allow your users to choose which theme is applied to the site:</p>

<pre style="background:rgba(238,238,238,0.92);color:#000">
<span style="color:#03c">&lt;<span style="font-weight:700">ThemeChooser</span> <span style="color:#36c;font-style:italic">SelectedThemeChanged</span>=<span style="color:#093">"@@SelectedThemeChanged"</span> /></span>

@@functions {
    void SelectedThemeChanged(ITheme selectedTheme)
    {
        ApplyTheme(selectedTheme);
        StateHasChanged();
    }
    void ApplyTheme(ITheme selectedTheme)
    {
<span style="color:#00f">if</span> (selectedTheme != null)
        {
            _primary = Css.CreateNew().AddRules(<span style="color:#093">"color"</span>, <span style="color:#093">"white"</span>, <span style="color:#093">"background-color"</span>, selectedTheme.Variables[<span style="color:#093">"primary"</span>]);
            _secondary = Css.CreateNew().AddRules(<span style="color:#093">"color"</span>, <span style="color:#093">"white"</span>, <span style="color:#093">"background-color"</span>, selectedTheme.Variables[<span style="color:#093">"secondary"</span>]);
        }
    else
        {
            _primary = Css.CreateNew();
            _secondary = Css.CreateNew();
        }
    }
}
</pre>

<h2>Creating your own theme chooser</h2>

<p>
    Although you can customize the class of the <code>select</code> element in the builtin <code>ThemeChooser</code>, you may wish to build your own. An example of this is in the shared folder of the
    sample site called <code>ThemePicker</code>:
</p>

<pre style="background:rgba(238,238,238,0.92);color:#000">
@@using Blazorous
@@inject IThemes themes

<span style="color:#03c">&lt;<span style="font-weight:700">select</span> <span style="color:#36c;font-style:italic">value</span>=<span style="color:#093">"@@_selected"</span> <span style="color:#36c;font-style:italic">onchange</span>=<span style="color:#093">"@@OnChange"</span> <span style="color:#36c;font-style:italic">class</span>=<span style="color:#093">"form-control"</span>></span>
    @@foreach (var theme in themes.Themes.Values)
    {
        &lt;option value=<span style="color:#093">"@@theme.Name"</span>>@@theme.Name&lt;/option>
    }
<span style="color:#03c">&lt;/<span style="font-weight:700">select</span>></span>

@@functions {
    private string _selected;

    protected override void OnInit()
    {
<span style="color:#00f">if</span> (themes.Current != null)
        {
            _selected = themes.Current.Name;
        }
    else
        {
            _selected = themes.Themes.First().Key;
        }
    }

    void OnChange()
    {
        themes.Current = themes.Themes[_selected];
    }
}
</pre>

<h2>Example of the applied themes</h2>

<p>Since the changing themes will not work on the static site, here is an example of the two themes defined above:</p>

<Dynamic TagName="h3" css="@_heading1">Soothing Web Colors</Dynamic>
<Dynamic TagName="div" css="@_primary1">Primary</Dynamic>
<Dynamic TagName="div" css="@_secondary1">Secondary</Dynamic>


<Dynamic TagName="h3" css="@_heading2">Harry Potter</Dynamic>
<Dynamic TagName="div" css="@_primary2">Primary</Dynamic>
<Dynamic TagName="div" css="@_secondary2">Secondary</Dynamic>

@functions {
    readonly ICss _alert = Css.CreateNew().AddClass("alert").AddClass("alert-info");

    readonly ICss _heading1 = Css.CreateNew().AddRule("color", "#423d5d").AddFontface(css =>
    {
        css.AddRule("fontFamily", "Fira Sans")
            .AddRule("fontStyle", "normal")
            .AddRule("fontWeight", 400)
            .AddRule("src", "local('Fira Sans Regular'), local('FiraSans-Regular'), url(https://fonts.gstatic.com/s/firasans/v8/va9E4kDNxMZdWfMOD5Vvl4jL.woff2) format('woff2')")
            .AddRule("unicodeRange", "U+0000-00FF, U+0131, U+0152-0153, U+02BB-02BC, U+02C6, U+02DA, U+02DC, U+2000-206F, U+2074, U+20AC, U+2122, U+2191, U+2193, U+2212, U+2215, U+FEFF, U+FFFD");
    });
    readonly ICss _primary1 =  Css.CreateNew().AddRules("color", "white", "background-color", "#f23d5d");
    readonly ICss _secondary1 = Css.CreateNew().AddRules("color", "white", "background-color", "#8c3d5d");

    readonly ICss _heading2 = Css.CreateNew().AddRules("color", "#008709").AddFontface(css =>
    {
        css.AddRule("fontFamily", "Butterfly Kids")
            .AddRule("fontStyle", "normal")
            .AddRule("fontWeight", 400)
            .AddRule("src", "local('Butterfly Kids Regular'), local('ButterflyKids-Regular'), url(https://fonts.gstatic.com/s/butterflykids/v6/ll8lK2CWTjuqAsXDqlnIbMNs5R4dpRA.woff2) format('woff2')")
            .AddRule("unicodeRange", "U+0000-00FF, U+0131, U+0152-0153, U+02BB-02BC, U+02C6, U+02DA, U+02DC, U+2000-206F, U+2074, U+20AC, U+2122, U+2191, U+2193, U+2212, U+2215, U+FEFF, U+FFFD");
    });
    readonly ICss _primary2 = Css.CreateNew().AddRules("color", "white", "background-color", "#e10000");
    readonly ICss _secondary2 = Css.CreateNew().AddRules("color", "white", "background-color", "#12159f");
}